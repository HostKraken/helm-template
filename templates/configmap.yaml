{{- $Plugins := .Values.plugins | splitList "," -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hostkraken.domainDashed" . }}-configmap
  namespace: {{ include "hostkraken.domainDashed" . }}
data:
  nginx.conf: |
    daemon off;
    error_log stderr notice;
    pid /var/run/nginx.pid;
    env DB_HOST;
    env DB_NAME;
    env DB_USER;
    env DB_PASS;

    worker_processes  1;
    events {
        worker_connections  1024;
    }

    http {
    proxy_buffers 32 128k;
            keepalive_timeout  600s;
            keepalive_requests 10000;
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 104.16.0.0/12;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2c0f:f248::/32;
    set_real_ip_from 2a06:98c0::/29;
      sendfile on;
      include    /etc/nginx/mime.types;
      include    /etc/nginx/fastcgi.conf;
      default_type application/octet-stream;
      access_log stdout;
      tcp_nopush   on;
      client_body_temp_path /tmp/nginx/body 1 2;
      fastcgi_temp_path /tmp/nginx/fastcgi_temp 1 2;

      log_format blocked '$time_local: Blocked request from $http_x_real_ip $request';

      log_format specialLog '$http_x_real_ip - $remote_user [$time_local]  '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent"';

      client_max_body_size 512M;

      server {
        listen       80;
        keepalive_timeout 0;

        root /usr/html;
        index  index.php index.html index.htm;
        access_log stdout;
        error_log stderr notice;

        disable_symlinks off;

        location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
        }

        location / {
          try_files $uri $uri/ /index.php?$args;
        }

        location ~* /(?:uploads|files)/.*\.php$ {
            deny all;
        }

        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
            access_log        off;
            log_not_found     off;
            expires           360d;
        }

        location ~ [^/]\.php(/|$) {
          fastcgi_split_path_info ^(.+?\.php)(/.*)$;
          if (!-f $document_root$fastcgi_script_name) {
            return 404;
          }
          fastcgi_pass unix:/var/run/php7-fpm.sock;
          fastcgi_index index.php;
          keepalive_requests 100000;
          fastcgi_keep_conn on;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          include fastcgi_params;
        }

        ## Block SQL injections
        location ~* union.*select.*\( { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* union.*all.*select.* { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* concat.*\( { access_log /usr/logs/nginx/blocked.log blocked; deny all; }

        ## Block common exploits
        location ~* (<|%3C).*script.*(>|%3E) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* base64_(en|de)code\(.*\) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* (%24&x) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* (%0|%A|%B|%C|%D|%E|%F|127\.0) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* \.\.\/  { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* ~$ { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* proc/self/environ { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* /\.(htaccess|htpasswd|svn) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }

        ## Block file injections
        location ~* [a-zA-Z0-9_]=(\.\.//?)+ { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* [a-zA-Z0-9_]=/([a-z0-9_.]//?)+ { access_log /usr/logs/nginx/blocked.log blocked; deny all; }

        ## wordpress security
        location ~* wp-config.php { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* wp-admin/includes { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* wp-app\.log { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
        location ~* (licence|readme|license)\.(html|txt) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }

      }

    }  
  php-fpm.conf: |
    error_log = /usr/logs/php-fpm/php-fpm.log
    log_level = warning

    [www]
    user = nginx
    group = nginx
    listen = /var/run/php7-fpm.sock
    listen.owner = nginx
    listen.group = nginx
    pm = static
    ; Total RAM dedicated to the web server / Max child process size
    pm.max_children = 8

    pm.process_idle_timeout = 3600s
    pm.max_requests = 10000
    chdir = /usr/html
    php_flag[display_errors] = off
    php_admin_value[opcache.enable] = 1
    php_admin_value[memory_limit] = 256M
    php_admin_value[upload_max_filesize] = 2048M
    php_admin_value[post_max_size] = 128M
    php_admin_value[output_buffering] = 1
    php_admin_value[openssl.cafile] = /etc/ssl/certs/ca-certificates.crt
    php_admin_value[openssl.capath] = /etc/ssl/certs
    php_admin_value[max_input_nesting_level] = 256
    php_admin_value[max_input_vars] = 10000
    php_admin_value[session.save_handler] = "memcached"
    php_admin_value[session.save_path] = "memcached.memcached.svc.cluster.local:11211"
    ; Redirect worker stdout and stderr into main error log. If not set, stdout and
    ; stderr will be redirected to /dev/null according to FastCGI specs.
    ; Default Value: no
    php_admin_value[catch_workers_output] = yes
    php_admin_value[emergency_restart_threshold] = 10
    php_admin_value[emergency_restart_interval] = 1m
    php_admin_value[process_control_timeout] = 10s
    ; Database variables passed via -e argument on Docker
    env["DB_HOST"] = "$DB_HOST"
    env["DB_USER"] = "$DB_USER"
    env["DB_PASS"] = "$DB_PASS"
    env["DB_NAME"] = "$DB_NAME"
  blacklist.ini: |
    /usr/html/wp-content/plugins/woo-*
    /usr/html/wp-content/plugins/woocommerc*
    /usr/html/wp-admin/*
    /usr/html/wp-login.php
  00_pgsql.conf: |
    extension=pgsql
  db-config.php: |-
    <?php
    /**
    * Use HyperDB to just use the replica for frontend reads.
    * Register the primary server to HyperDB
    */
    $wpdb->persistent = true;
    $wpdb->add_database( array(
            'host'     => "mysql-galera-local-mariadb-galera-0.mysql-galera-local-mariadb-galera-headless.mysql.svc.cluster.local",
            'user'     => "DB_USER",
            'password' => "DB_PASSWORD",
            'name'     => "DB_NAME",
            'write'    => 1, 
            'read'     => 1,
    ));
    /**
    * Register replica database server if it's available in this environment
    */
            $wpdb->add_database(array(
                    'host'     => "mysql-galera-local-mariadb-galera-1.mysql-galera-local-mariadb-galera-headless.mysql.svc.cluster.local",
                    'user'     => "DB_USER",
                    'password' => "DB_PASSWORD",
                    'name'     => "DB_NAME",
                    'write'    => 0, 
                    'read'     => ( defined( 'WP_CLI' ) && WP_CLI ) ? 0 : 1, 
            ));
            
            $wpdb->add_database(array(
                    'host'     => "mysql-galera-local-mariadb-galera-2.mysql-galera-local-mariadb-galera-headless.mysql.svc.cluster.local",
                    'user'     => "DB_USER",
                    'password' => "DB_PASSWORD",
                    'name'     => "DB_NAME",
                    'write'    => 0, 
                    'read'     => ( defined( 'WP_CLI' ) && WP_CLI ) ? 0 : 1, 
                    ));
          
  disable-updates.php: |
    // hide update notifications
    function remove_core_updates(){

    global $wp_version;return(object) array('last_checked'=> time(),'version_checked'=> $wp_version,);
     }
    add_filter('pre_site_transient_update_core','remove_core_updates'); //hide updates for WordPress itself
    add_filter('pre_site_transient_update_plugins','remove_core_updates'); //hide updates for all plugins
    add_filter('pre_site_transient_update_themes','remove_core_updates'); //hide updates for all themes
    function remove_admin_menu_items() {
    $remove_menu_items = array(__('Dashboard'));
    global $menu;
    end ($menu);
    while (prev($menu)){
        $item = explode(' ',$menu[key($menu)][0]);
    if(in_array($item[0] != NULL?$item[0]:"" , $remove_menu_items)){
    unset($menu[key($menu)]);}
    }
    } 
    add_action('admin_menu', 'remove_admin_menu_items');
    function remove_plugin_install() {
    $page = remove_submenu_page( 'plugins.php', 'plugin-install.php' );
    $page = remove_submenu_page( 'themes.php', 'theme-editor.php' );
    $page = remove_submenu_page( 'themes.php', 'themes.php' );
    $page = remove_submenu_page( 'tools.php', 'site-health.php' );
    $page = remove_submenu_page( 'tools.php', 'import.php' );
    $page = remove_submenu_page( 'tools.php', 'export.php' );
    $page = remove_submenu_page( 'plugins.php', 'plugin-editor.php' );
    // $page[0] is the menu title
    // $page[1] is the minimum level or capability required
    // $page[2] is the URL to the item's file
    }
    add_action( 'admin_menu', 'remove_plugin_install', 999 );



  database-migration.sh: |
    cp /configs/blacklist.ini /etc/php7/blacklist.ini;
    cp /configs/nginx.conf /etc/nginx/nginx.conf;
    sed -i 's/;opcache/opcache/g' /etc/php7/php.ini;
    sed -i 's/opcache.blacklist_filename=/opcache.blacklist_filename=\/etc\/php7\/blacklist.ini/g' /etc/php7/php.ini;
    sed -i 's/.*session.save_handler.*/session.save_handler = "memcached"/g' /etc/php7/php.ini
    sed -i 's/.*session.save_path.*/session.save_path = "memcached.memcached.svc.cluster.local:11211"/g' /etc/php7/php.ini
    rm -f /usr/html/wp-admin/install.php; 
    cp /configs/php-fpm.conf /etc/php7/php-fpm.conf;
    echo ""
    killall -HUP php-fpm7
    php-fpm7
    cp /configs/wp-config.php /usr/html;
    chown nginx: /usr/html/wp-config.php;
    wget https://downloads.wordpress.org/plugin/hyperdb.1.8.zip;
    unzip hyperdb.1.8.zip;
    mv hyperdb/db.php /usr/html/wp-content;
    sleep 1;
    cp /configs/db-config.php /usr/html;
    # gross hacks for old sites
    case $DATABASE_NAME in
      *"db_"*)
        echo "Database name matches formmat. Continuing.."
        ;;
      *)
        echo "Database name does not match format. Fixing..."  
        dbtemp1=`echo $DATABASE_NAME`
        dbtemp=db_${dbtemp1}
        export DATABASE_NAME=$dbtemp
        ;;
    esac           
    case $DATABASE_USER in
      *"user_"*)
        echo "Database name matches format. Continuing.."
        ;;
      *)
        echo "Database user does not match format. Fixing..."  
        usertemp1=`echo $DATABASE_USER|head -c25`
        usertemp=user_${usertemp1}
        export DATABASE_USER=$usertemp
        ;;
    esac
    sed -i "s/DB_USER/$DATABASE_USER/g" /usr/html/db-config.php;
    sed -i "s/DB_PASSWORD/$DATABASE_PASS/g" /usr/html/db-config.php;
    sed -i "s/DB_NAME/$DATABASE_NAME/g" /usr/html/db-config.php;
    sed -i "s/ADATABASE_USER/$DATABASE_USER/g" /usr/html/wp-config.php;
    sed -i "s/ADATABASE_PASS/$DATABASE_PASS/g" /usr/html/wp-config.php;
    sed -i "s/ADATABASE_NAME/$DATABASE_NAME/g" /usr/html/wp-config.php;
      /usr/bin/wp-cli core install --path='/usr/html' --url="{{ $.Values.domain }}" --title='{{ .Values.site_title | default "New Deployment" }}' --admin_user='admin' --admin_email='roger@hostkraken.com' --admin_password='H0stKr4ken' || true
      sleep 10;
    /usr/bin/wp-cli plugin deactivate hello --path=/usr/html --url="{{ $.Values.domain }}"
    /usr/bin/wp-cli plugin uninstall hello --path=/usr/html --url="{{ $.Values.domain }}"
    {{- range $Plugins }}
    if ! /usr/bin/wp-cli plugin is-installed {{ . }} --path='/usr/html' --url="{{ $.Values.domain }}" ; then
    /usr/bin/wp-cli plugin install --activate {{ . }} --path=/usr/html --url="{{ $.Values.domain }}"  || true    
    fi
    {{- end }}
    export divi_url=`aws s3 presign s3://krakenwpassets/Divi.zip`
    /usr/bin/wp-cli theme install --path='/usr/html' "$divi_url" --url="{{ $.Values.domain }}"
    /usr/bin/wp-cli theme install --activate {{ .Values.wp_theme|default "twentytwenty" }} --path='/usr/html' --url="{{ $.Values.domain }}"
    /usr/bin/wp-cli theme activate {{ .Values.wp_theme|default "twentytwenty" }} --path='/usr/html' --url="{{ $.Values.domain }}"
    export disabledupdates=`grep -c "hide update" /usr/html/wp-content/themes/{{ .Values.wp_theme|default "twentytwenty" }}/functions.php`
    if [[ "$disabledupdates" -eq 0 ]]; then
      cat /configs/disable-updates.php >>/usr/html/wp-content/themes/{{ .Values.wp_theme|default "twentytwenty" }}/functions.php
    fi
    rm -f /usr/html/wp-admin/plugin-editor.php
    rm -f /usr/html/wp-admin/plugin-install.php
    rm -f /usr/html/wp-admin/site-health.php
    rm -f /usr/html/wp-admin/site-health-info.php
    rm -f /usr/html/wp-admin/import.php
    rm -f /usr/html/wp-admin/theme-editor.php
    rm -f /usr/html/wp-admin/export.php
    sed -i 's/<a.*plugin-install.php.*\/a>//g' /usr/html/wp-admin/plugins.php

  wp-config.php: |
    <?php 
    /* MySQL settings */
    define( 'DB_NAME',     'ADATABASE_NAME' );
    define( 'DB_USER',     'ADATABASE_USER' );
    define( 'DB_PASSWORD', 'ADATABASE_PASS' );
    define( 'DB_HOST',     'mysql-galera-local-mariadb-galera-0.mysql-galera-local-mariadb-galera-headless.mysql.svc.cluster.local' );
    define( 'DB_CHARSET',  'utf8' );
    #define('FORCE_SSL_ADMIN', true);
    define('SITE_URL', "https://{{ .Values.domain }}");
    /* MySQL database table prefix. */
    $table_prefix = '{{- .Values.table_prefix | default "wp_" -}}';
    //Begin Really Simple SSL Load balancing fix
    if ((isset($_ENV["HTTPS"]) && ("on" == $_ENV["HTTPS"]))
    || (isset($_SERVER["HTTP_X_FORWARDED_SSL"]) && (strpos($_SERVER["HTTP_X_FORWARDED_SSL"], "1") !== false))
    || (isset($_SERVER["HTTP_X_FORWARDED_SSL"]) && (strpos($_SERVER["HTTP_X_FORWARDED_SSL"], "on") !== false))
    || (isset($_SERVER["HTTP_CF_VISITOR"]) && (strpos($_SERVER["HTTP_CF_VISITOR"], "https") !== false))
    || (isset($_SERVER["HTTP_CLOUDFRONT_FORWARDED_PROTO"]) && (strpos($_SERVER["HTTP_CLOUDFRONT_FORWARDED_PROTO"], "https") !== false))
    || (isset($_SERVER["HTTP_X_FORWARDED_PROTO"]) && (strpos($_SERVER["HTTP_X_FORWARDED_PROTO"], "https") !== false))
    || (isset($_SERVER["HTTP_X_PROTO"]) && (strpos($_SERVER["HTTP_X_PROTO"], "SSL") !== false))
    ) {
      $_SERVER["HTTPS"] = "on";
    }
    //END Really Simple SSL 

    /* Authentication Unique Keys and Salts. */
    /* https://api.wordpress.org/secret-key/1.1/salt/ */
    define( 'AUTH_KEY',         '{{ randAlphaNum 16 }}' );
    define( 'SECURE_AUTH_KEY',  '{{ randAlphaNum 16 }}' );
    define( 'LOGGED_IN_KEY',    '{{ randAlphaNum 16 }}' );
    define( 'NONCE_KEY',        '{{ randAlphaNum 16 }}' );
    define( 'AUTH_SALT',        '{{ randAlphaNum 16 }}' );
    define( 'SECURE_AUTH_SALT', '{{ randAlphaNum 16 }}' );
    define( 'LOGGED_IN_SALT',   '{{ randAlphaNum 16 }}' );
    define( 'NONCE_SALT',       '{{ randAlphaNum 16 }}' );


    /* Absolute path to the WordPress directory. */
    if ( !defined('ABSPATH') )
      define('ABSPATH', dirname(__FILE__) . '/');

    /* Sets up WordPress vars and included files. */
    require_once(ABSPATH . 'wp-settings.php');

    
